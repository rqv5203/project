openapi: 3.0.4
info:
  title: Weather Collection API
  description: |-
    A RESTful API for managing user's weather collections. This API allows users to save, retrieve, update, and delete weather collections with authentication required for all operations.
    
    ## Authentication
    All endpoints require authentication via JWT token passed in the Authorization header as Bearer token.
    
    ## Features
    - Save weather collections with metadata (location, dates, weather data)
    - Retrieve user's saved weather collections
    - Delete saved weather collections
    - Update weather collection titles
    - Upload and manage photos for specific dates
  version: 1.0.0
  contact:
    name: API Support
    email: support@weatherapp.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.weatherapp.com
    description: Production server

tags:
  - name: weather
    description: Operations for managing weather collections

paths:
  /weather/save:
    post:
      tags:
        - weather
      summary: Save a weather collection
      description: Save weather data for a specific date range with metadata including location, dates, and weather information.
      operationId: saveWeatherCollection
      requestBody:
        description: Weather collection data to be saved
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveWeatherCollectionRequest'
            example:
              title: "Vacation Weather"
              startDate: "2024-01-01"
              endDate: "2024-01-07"
              location: "Paris, France"
              weatherData:
                daily:
                  time: ["2024-01-01", "2024-01-02"]
                  temperature_2m_max: [15.5, 18.2]
                  temperature_2m_min: [8.1, 12.3]
                  weather_code: [0, 2]
      responses:
        '201':
          description: Weather collection successfully saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveWeatherCollectionResponse'
        '400':
          description: Invalid input or failed to save weather collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /weather/user/{userId}:
    get:
      tags:
        - weather
      summary: Get user's saved weather collections
      description: Retrieve all weather collections saved by the authenticated user.
      operationId: getUserWeatherCollections
      parameters:
        - name: userId
          in: path
          description: User ID (email) to fetch weather collections for
          required: true
          schema:
            type: string
            format: email
          example: "user@example.com"
      responses:
        '200':
          description: Successfully retrieved user's weather collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserWeatherCollectionsResponse'
        '403':
          description: Forbidden - User can only access their own collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error - Failed to fetch collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /weather/{id}:
    get:
      tags:
        - weather
      summary: Get a specific weather collection
      description: Retrieve a specific weather collection by ID.
      operationId: getWeatherCollection
      parameters:
        - name: id
          in: path
          description: Weather collection ID
          required: true
          schema:
            type: string
          example: "collection_12345"
      responses:
        '200':
          description: Successfully retrieved weather collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWeatherCollectionResponse'
        '404':
          description: Weather collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only access their own collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - weather
      summary: Delete a weather collection
      description: Delete a weather collection. Users can only delete their own collections.
      operationId: deleteWeatherCollection
      parameters:
        - name: id
          in: path
          description: ID of the weather collection to delete
          required: true
          schema:
            type: string
          example: "collection_12345"
      responses:
        '204':
          description: Weather collection successfully deleted
        '404':
          description: Weather collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only delete their own collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /weather/{id}/title:
    put:
      tags:
        - weather
      summary: Update weather collection title
      description: Update the title of a weather collection. Users can only update their own collections.
      operationId: updateWeatherCollectionTitle
      parameters:
        - name: id
          in: path
          description: ID of the weather collection to update
          required: true
          schema:
            type: string
          example: "collection_12345"
      requestBody:
        description: New title for the collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTitleRequest'
            example:
              title: "My Amazing Vacation Weather"
      responses:
        '200':
          description: Title successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid input or failed to update title
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Weather collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only update their own collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /weather/{id}/photo/{date}:
    post:
      tags:
        - weather
      summary: Upload photo for a specific date
      description: Upload a photo for a specific date in a weather collection.
      operationId: uploadWeatherPhoto
      parameters:
        - name: id
          in: path
          description: Weather collection ID
          required: true
          schema:
            type: string
          example: "collection_12345"
        - name: date
          in: path
          description: Date for the photo (YYYY-MM-DD format)
          required: true
          schema:
            type: string
            format: date
          example: "2024-01-01"
      requestBody:
        description: Photo file to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: Photo file to upload
      responses:
        '200':
          description: Photo successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoUploadResponse'
        '400':
          description: Invalid input or failed to upload photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Weather collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only upload photos to their own collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - weather
      summary: Remove photo for a specific date
      description: Remove a photo for a specific date in a weather collection.
      operationId: removeWeatherPhoto
      parameters:
        - name: id
          in: path
          description: Weather collection ID
          required: true
          schema:
            type: string
          example: "collection_12345"
        - name: date
          in: path
          description: Date for the photo to remove (YYYY-MM-DD format)
          required: true
          schema:
            type: string
            format: date
          example: "2024-01-01"
      responses:
        '200':
          description: Photo successfully removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Weather collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User can only remove photos from their own collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message describing what went wrong
          example: "Failed to save weather collection"

    WeatherCollection:
      type: object
      required:
        - id
        - title
        - userId
        - startDate
        - endDate
        - location
        - weatherData
      properties:
        id:
          type: string
          description: Unique identifier for the weather collection
          example: "collection_12345"
        title:
          type: string
          description: Title of the weather collection
          example: "Vacation Weather"
        userId:
          type: string
          format: email
          description: Email of the user who saved the collection
          example: "user@example.com"
        startDate:
          type: string
          format: date
          description: Start date of the weather collection
          example: "2024-01-01"
        endDate:
          type: string
          format: date
          description: End date of the weather collection
          example: "2024-01-07"
        location:
          type: string
          description: Location name for the weather collection
          example: "Paris, France"
        weatherData:
          type: object
          description: Weather data from Open-Meteo API
          properties:
            daily:
              type: object
              properties:
                time:
                  type: array
                  items:
                    type: string
                    format: date
                  example: ["2024-01-01", "2024-01-02"]
                temperature_2m_max:
                  type: array
                  items:
                    type: number
                  example: [15.5, 18.2]
                temperature_2m_min:
                  type: array
                  items:
                    type: number
                  example: [8.1, 12.3]
                weather_code:
                  type: array
                  items:
                    type: integer
                  example: [0, 2]
                precipitation_sum:
                  type: array
                  items:
                    type: number
                  example: [0.0, 2.5]
                wind_speed_10m_max:
                  type: array
                  items:
                    type: number
                  example: [10.2, 15.8]
        photos:
          type: object
          description: Photos associated with specific dates
          additionalProperties:
            type: string
            format: uri
          example:
            "2024-01-01": "/uploads/photos/photo-123456.jpg"
            "2024-01-02": "/uploads/photos/photo-789012.jpg"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the collection was created
          example: "2024-01-01T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the collection was last updated
          example: "2024-01-01T10:00:00Z"

    SaveWeatherCollectionRequest:
      type: object
      required:
        - startDate
        - endDate
        - location
        - weatherData
      properties:
        title:
          type: string
          description: Title of the weather collection
          example: "Vacation Weather"
        startDate:
          type: string
          format: date
          description: Start date of the weather collection
          example: "2024-01-01"
        endDate:
          type: string
          format: date
          description: End date of the weather collection
          example: "2024-01-07"
        location:
          type: string
          description: Location name for the weather collection
          example: "Paris, France"
        weatherData:
          type: object
          description: Weather data from Open-Meteo API
          properties:
            daily:
              type: object
              properties:
                time:
                  type: array
                  items:
                    type: string
                    format: date
                temperature_2m_max:
                  type: array
                  items:
                    type: number
                temperature_2m_min:
                  type: array
                  items:
                    type: number
                weather_code:
                  type: array
                  items:
                    type: integer
                precipitation_sum:
                  type: array
                  items:
                    type: number
                wind_speed_10m_max:
                  type: array
                  items:
                    type: number

    SaveWeatherCollectionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        collection:
          $ref: '#/components/schemas/WeatherCollection'

    GetUserWeatherCollectionsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        collections:
          type: array
          items:
            $ref: '#/components/schemas/WeatherCollection'

    GetWeatherCollectionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        collection:
          $ref: '#/components/schemas/WeatherCollection'

    UpdateTitleRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: New title for the weather collection
          example: "My Amazing Vacation Weather"

    PhotoUploadResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        photoUrl:
          type: string
          format: uri
          description: URL of the uploaded photo
          example: "/uploads/photos/photo-123456.jpg"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication. Include the token in the Authorization header as 'Bearer {token}'

security:
  - bearerAuth: []